inv.K.mm <- chol2inv(U.mm)
K.mn <- covariance.eval('K.mn')
K.nn <- covariance.eval('K.nn')
K.tilde <- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / tail(par.svi, 1) + inv.K.mm
U.S.svi <- chol(S.svi)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_per_svi.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_per_svi.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_per_svi.cpp")
step.k.se.l.svi
d.k.per.l
rm(list = ls())
library(RcppArmadillo)
library(microbenchmark)
library(parallel)
source("~/Dropbox (INSEAD)/Crime Modeling/GP functions - 20200417.R")
load(file = '~/Dropbox (INSEAD)/Crime Modeling/Resources/crime.data.by_week.subset_6y.Rdata')
y.sample <- with(data.sub, tapply(y, week, mean))
sample.size <- length(y.sample)
X.sample <- as.matrix(as.numeric(names(y.sample)) - min(as.numeric(names(y.sample))) + 1)
y.sample <- as.vector(y.sample)
X.m <- head(X.sample, 10)
m.size <- nrow(X.m)
X.n <- tail(X.sample, 20)
batch.size <- nrow(X.n)
y.svi <- as.matrix(tail(y.sample, 20))
par.svi <- c(240, 20, 30)
jitter.v <- 1e-2
covariance.calls <- lapply(list(
K.mm = "k.per(X.m, X.m, l = par.svi[1], s = par.svi[2], 52) + diag(jitter.v, m.size)",
K.mn = "k.per(X.m, X.n, l = par.svi[1], s = par.svi[2], 52)",
K.nn = "k.per(X.n, X.n, l = par.svi[1], s = par.svi[2], 52)"
), function(i) parse(text = i))
m.svi <- runif(m.size)
S.svi <- k.se(X.m, X.m, l = par.svi[1], s = par.svi[2]) + diag(jitter.v, m.size)
K.mm <- covariance.eval('K.mm')
U.mm <- chol(K.mm)
inv.K.mm <- chol2inv(U.mm)
K.mn <- covariance.eval('K.mn')
K.nn <- covariance.eval('K.nn')
K.tilde <- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / tail(par.svi, 1) + inv.K.mm
U.S.svi <- chol(S.svi)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_per_svi.cpp")
step.k.per.l.svi
step.k.per.l.svi <- function(X.m, X.n, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.per.s.svi
step.k.per.l.svi <- function(X.m, X.n, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.l(X.m, X.m, relevant.l, relevant.s, 52)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.l(X.m, X.n, relevant.l, relevant.s, 52)
tr.d.K.nn <- sum(diag(d.k.per.l(X.n, X.n, relevant.l, relevant.s, 52)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
step.k.per.s.svi <- function(X.m, X.n, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, 52)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, 52)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, 52)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.se.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_se_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_per_svi.cpp")
all.equal(
as.numeric(step.k.se.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_se_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52., inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.se.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52., inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52., inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
microbenchmark(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52., inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.per.s.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52., inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 2)
)
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
microbenchmark(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.per.s.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 2)
)
as.numeric(step.k.per.s.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3]))
step.k.per.s.svi
step.k.per.s.svi <- function(X.m, X.n, relevant.l, relevant.s, sigma.sq.svi) {
d.K.mm <- d.k.per.s(X.m, l = relevant.l, s = relevant.s, p = 52)
d.inv.K.mm <- - inv.K.mm %*% d.K.mm %*% inv.K.mm
d.K.mn <- d.k.per.s(X.m, X.n, l = relevant.l, s = relevant.s, p = 52)
tr.d.K.nn <- sum(diag(d.k.per.s(X.n, X.n, relevant.l, relevant.s, p = 52)))
d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn + t(K.mn) %*% d.inv.K.mm %*% K.mn + t(K.mn) %*% inv.K.mm %*% d.K.mn
d.sum.Lambda_i <- (d.inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% d.K.mn %*% t(K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(d.K.mn) %*% inv.K.mm +
inv.K.mm %*% K.mn %*% t(K.mn) %*% d.inv.K.mm) / sigma.sq.svi
output <- t(y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)) %*% (t(d.K.mn) %*% (inv.K.mm %*% m.svi) + t(K.mn) %*% (d.inv.K.mm %*% m.svi)) / sigma.sq.svi -
(tr.d.K.nn - sum(diag(d.Q.nn))) / (2 * sigma.sq.svi) -
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% d.sum.Lambda_i[, j]})) / 2 +
(sum(diag((inv.K.mm %*% S.svi %*% inv.K.mm - inv.K.mm) %*% d.K.mm)) - t(m.svi) %*% d.inv.K.mm %*% m.svi) / 2
return(output)
}
all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
microbenchmark(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
all.equal(
as.numeric(step.k.per.s.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3])),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 2)
)
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/GPRCPP functions - 20200425.R')
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/GPRCPP functions - 20200425.R')
microbenchmark(
step.k.se.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
microbenchmark(
step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
check.vec <- c()
for (i in seq(1e3)) {
par.svi <- rgamma(3, .5, .5)
check.vec[i] <- all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52)),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
}
sum(check.vec == T)
step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52)
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
check.vec <- c()
for (i in seq(1e3)) {
par.svi <- rgamma(3, .5, .5)
check.vec[i] <- all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52)),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)
}
sum(check.vec == T)
check.vec
check.vec <- c()
for (i in seq(1e3)) {
par.svi <- rgamma(3, .5, .5)
check.vec[i] <- all.equal(
as.numeric(step.k.per.l.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52)),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 1)
)$value
}
check.vec <- c()
for (i in seq(1e3)) {
par.svi <- rgamma(3, .5, .5)
check.vec[i] <- all.equal(
as.numeric(step.k.per.s.svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52)),
rcpp_step_k_per_svi(X.m, X.n, par.svi[1], par.svi[2], par.svi[3], 52, inv.K.mm, K.mn, y.svi, as.matrix(m.svi), S.svi, 2)
)
}
sum(check.vec == T)
check.vec
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_lin_tester.R', echo=TRUE)
source('~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_lin_tester.R', echo=TRUE)
library(RcppArmadillo)
# SE - Function and derivatives ----------------------------------------------------
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_diff_sq_mx.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_k_se_diff.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_k_se.cpp")
# Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_d_k_se_l.cpp")
# Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_d_k_se_s.cpp")
# Periodic - Function and derivatives -------------------------------------
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_diff_2norm_mx.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_k_per_diff.cpp")
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_k_per.cpp")
# Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_d_k_per_l.cpp")
# Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_d_k_per_s.cpp")
# Linear - Function and derivatives -----------------------------------
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_k_lin.cpp")
# Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_d_k_lin_l.cpp")
# Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_d_k_lin_s.cpp")
# Titsias 2009 - functions ------------------------------------------------
# VLB.tits <- function(X.m, l.tits, s.tits, sigma.sq.tits, jitter.v = 0) {
#   K.mm <<- k.se(X.m, l = l.tits, s = s.tits) + diag(jitter.v, m.size)
#   U.mm <<- chol(K.mm)
#   K.mn <<- k.se(X.m, X.sample, l = l.tits, s = s.tits)
#   UK.mn <- forwardsolve(t(U.mm), K.mn)
#   Q.nn <- t(UK.mn) %*% UK.mn
#   Sigma.U <- chol(diag(sigma.sq.tits, sample.size) + Q.nn)
#   inv.Sigma.U.y <- forwardsolve(t(Sigma.U), y.sample)
#   output <- - sample.size / 2 * log(2 * pi) -
#     sum(log(diag(t(Sigma.U)))) -
#     t(inv.Sigma.U.y) %*% inv.Sigma.U.y / 2 -
#     sum(sapply(X.sample, function(x.i) {k.se(x.i, x.i, l = l.tits, s = s.tits)})) / (2 * sigma.sq.tits) +
#     sum(diag(Q.nn)) / (2 * sigma.sq.tits)
#   return(output)
# }
# step.l.tits <- function() {
#   d.K.mm <- d.k.se.l(X.m, l = par.tits[1], s = par.tits[2])
#   d.K.mn <- d.k.se.l(X.m, X.sample, l = par.tits[1], s = par.tits[2])
#   d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn -
#     t(K.mn) %*% inv.K.mm %*% d.K.mm %*% inv.K.mm %*% K.mn +
#     t(K.mn) %*% inv.K.mm %*% d.K.mn
#   output <- sum(sapply(seq(sample.size), function(i) {M[i, ] %*% d.Q.nn[, i]})) / 2 +
#     sum(diag(d.Q.nn)) / (2 * par.tits[3])
#   return(output)
# }
# step.s.tits <- function() {
#   d.K.mm <- d.k.se.s(X.m, l = par.tits[1], s = par.tits[2])
#   d.K.mn <- d.k.se.s(X.m, X.sample, l = par.tits[1], s = par.tits[2])
#   tr.d.K.nn <- sum(sapply(X.sample, d.k.se.s, l = par.tits[1], s = par.tits[2]))
#   d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn -
#     t(K.mn) %*% inv.K.mm %*% d.K.mm %*% inv.K.mm %*% K.mn +
#     t(K.mn) %*% inv.K.mm %*% d.K.mn
#   output <- sum(sapply(seq(sample.size), function(i) {M[i, ] %*% d.Q.nn[, i]})) / 2 -
#     tr.d.K.nn / (2 * par.tits[3]) +
#     sum(diag(d.Q.nn)) / (2 * par.tits[3])
#   return(output)
# }
# step.sigma.sq.tits <- function() {
#   output <- - sum(diag(inv.K)) / 2 +
#     t(a) %*% a / 2 +
#     sum(sapply(X.sample, function(x.i) {k.se(x.i, x.i, l = par.tits[1], s = par.tits[2])})) / (2 * par.tits[3] ^ 2) -
#     sum(diag(t(K.mn) %*% inv.K.mm %*% K.mn)) / (2 * par.tits[3] ^ 2)
#   return(output)
# }
# step.x.tits <- function(r, c = 1) {
#   d.K.mm <- d.k.se.x(X.m, l = par.tits[1], s = par.tits[2], r = r, c = c)
#   d.K.mn <- d.k.se.x(X.m, X.sample, l = par.tits[1], s = par.tits[2], r = r, c = c)
#   d.Q.nn <-  t(d.K.mn) %*% inv.K.mm %*% K.mn -
#     t(K.mn) %*% inv.K.mm %*% d.K.mm %*% inv.K.mm %*% K.mn +
#     t(K.mn) %*% inv.K.mm %*% d.K.mn
#   output <- sum(sapply(seq(sample.size), function(i) {M[i, ] %*% d.Q.nn[, i]})) / 2 +
#     sum(diag(d.Q.nn)) / (2 * par.tits[3])
#   return(output)
# }
# Hensman et alii 2013 - functions ----------------------------------------
# # CHECKS
# Lambda_i <- function(i) {(inv.K.mm %*% K.mn[, i]) %*% (t(K.mn[, i]) %*% inv.K.mm) / sigma.sq.svi}
# all.equal(Lambda, Reduce('+', lapply(seq(batch.size), Lambda_i)) + inv.K.mm)
# L3 <- function() {
#   sum(sapply(seq(batch.size), function(i) {
#     dnorm(y.svi[i], t(K.mn[, i]) %*% (inv.K.mm %*% m.svi), sqrt(sigma.sq.svi), log = T)
#   })) -
#     sum(diag(K.tilde)) / (2 * sigma.sq.svi) -
#     sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% (Lambda - inv.K.mm)[, j]})) / 2 -
#     (sum(diag(inv.K.mm %*% S.svi)) + t(m.svi) %*% (inv.K.mm %*% m.svi) - m.size + log(det(K.mm)) - log(det(S.svi))) / 2
# }
# # END OF CHECKS
L3 <- function(sigma.sq.svi) {
sum(sapply(seq(batch.size), function(i) {
dnorm(y.svi[i], t(K.mn[, i]) %*% (inv.K.mm %*% m.svi), sqrt(sigma.sq.svi), log = T)
})) -
.5 / sigma.sq.svi * sum(diag(K.tilde)) -
.5 * sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% (Lambda - inv.K.mm)[, j]})) -
.5 * (sum(sapply(seq(m.size), function(j) {inv.K.mm[j, ] %*% S.svi[, j]})) +
t(m.svi) %*% (inv.K.mm %*% m.svi) - m.size) -
sum(log(diag(U.mm))) + sum(log(diag(U.S.svi)))
}
covariance.eval <- function(which.K) {
Reduce('+', mclapply(covariance.calls[[which.K]], eval))
}
update.L3 <- function(covariance.calls, sigma.sq.svi, jitter.v = 1e-2) {
K.mm <<- covariance.eval('K.mm')
U.mm <<- chol(K.mm)
inv.K.mm <<- chol2inv(U.mm)
K.mn <<- covariance.eval('K.mn')
K.nn <<- covariance.eval('K.nn')
K.tilde <<- K.nn - t(K.mn) %*% inv.K.mm %*% K.mn
Lambda <<- inv.K.mm %*% K.mn %*% t(K.mn) %*% inv.K.mm / sigma.sq.svi + inv.K.mm
U.S.svi <<- chol(S.svi)
return(L3(sigma.sq.svi))
}
# without momentum
update.variational.parameters <- function(sigma.sq.svi, step.size = 1e-2) {
if (length(step.size) == 1) step.size <- rep(step.size, 2)
inv.S <- chol2inv(U.S.svi)
updates <- list(
inv.K.mm %*% (K.mn %*% y.svi) / sigma.sq.svi - inv.S %*% m.svi,
inv.S / 2 - Lambda / 2
)
theta.new <- list(
inv.S %*% m.svi + step.size[1] * updates[[1]],
- inv.S / 2 + step.size[2] * updates[[2]]
)
S.new <- chol2inv(chol(- 2 * theta.new[[2]]))
S.new <- chol2inv(chol(- 2 * theta.new[[2]]))
m.new <- S.new %*% theta.new[[1]]
output <- list(c(m.new), S.new)
return(output)
}
# # with momentum
# update.variational.parameters <- function(m, S, step.size = 1, momentum = 0, sigma.sq.svi) {
#   if (length(step.size) == 1) step.size <- rep(step.size, 2)
#   if (length(momentum) == 1) momentum <- rep(momentum, 2)
#   inv.S <- chol2inv(chol(S))
#   if ('old.updates' %in% ls()) {
#     updates <- list(
#       (1 - momentum[1]) * (inv.K.mm %*% (K.mn %*% y.svi) / sigma.sq.svi - inv.S %*% m) + momentum * old.updates[[1]],
#       (1 - momentum[2]) * (inv.S / 2 - Lambda / 2) + momentum * old.updates[[2]]
#     )} else {
#       updates <- list(
#         inv.K.mm %*% (K.mn %*% y.svi) / sigma.sq.svi - inv.S %*% m,
#         inv.S / 2 - Lambda / 2
#       )}
#   old.updates <<- updates
#   theta.new <- list(
#     inv.S %*% m + step.size[1] * updates[[1]],
#     - inv.S / 2 + step.size[2] * updates[[2]]
#   )
#   S.new <- chol2inv(chol(- 2 * theta.new[[2]]))
#   m.new <- S.new %*% theta.new[[1]]
#   output <- list(c(m.new), S.new)
#   return(output)
# }
step.k.sigma.sq.svi <- function(sigma.sq.svi = 1) {
z <- y.svi - t(K.mn) %*% (inv.K.mm %*% m.svi)
output <- - batch.size / (2 * sigma.sq.svi) +
(t(z) %*% z + sum(diag(K.tilde)) +
sum(sapply(seq(m.size), function(j) {S.svi[j, ] %*% (sigma.sq.svi * (Lambda - inv.K.mm))[, j]}))) / (2 * sigma.sq.svi ^ 2)
return(output)
}
# Hensman - SE+ ------------------------------------------------------------
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_se_svi.cpp")
# Hensman - Per+ -----------------------------------------------------------
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_per_svi.cpp")
# Hensman - Lin+ -----------------------------------------------------------
Rcpp::sourceCpp("~/Dropbox (INSEAD)/Crime Modeling/CPP code/rcpp_step_k_lin_svi.cpp")
View(rcpp_step_k_se_svi)
.Call
??.Call
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
# rcpp_ratio(delta, 11, mx, 1:10, 2, .5)
rcpp_Dirac_SS(X.train.std, y.train, 1, 1)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/JBU_package/BVS - 20200510.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
X.train.std
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
beta.true
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
source('~/OneDrive - INSEAD/Github/BVS code/Dirac_SS_sampler - tester.R', echo=TRUE)
